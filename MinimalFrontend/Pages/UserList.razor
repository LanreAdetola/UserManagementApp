@page "/user-list"
@using MinimalFrontend.Models
@inject HttpClient       Http
@inject NavigationManager Nav
@inject IJSRuntime       JS

<h3>User List</h3>

<button class="btn btn-success mb-2" @onclick="NavigateToCreate">
    ➕ Create New User
</button>

@if (users is null)
{
    <p><em>Loading users…</em></p>
}
else if (!users.Any())
{
    <p>No users found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th style="width:140px"></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var u in users)
        {
            <tr>
                <td>@u.FirstName</td>
                <td>@u.LastName</td>
                <td>@u.Email</td>
                <td>@u.Phone</td>
                <td>
                    <button class="btn btn-sm btn-link"
                            @onclick="@(() => NavigateToEdit(u.Id))">
                        ✏️ Edit
                    </button>

                    <button class="btn btn-sm btn-danger"
                            @onclick="@(() => Delete(u.Id))">
                        🗑️ Delete
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    List<User>? users;

    /* ---------- life-cycle ---------- */
    protected override async Task OnInitializedAsync() => await LoadUsers();
    async Task LoadUsers() =>
        users = await Http.GetFromJsonAsync<List<User>>("api/user") ?? new();

    /* ---------- navigation helpers ---------- */
    void NavigateToCreate()        => Nav.NavigateTo("/create-user");
    void NavigateToEdit(int id)    => Nav.NavigateTo($"/edit-user/{id}");

    /* ---------- delete ---------- */
    async Task Delete(int id)
    {
        var ok = await JS.InvokeAsync<bool>("confirm",
                 $"Delete user {id}? This cannot be undone.");

        if (!ok) return;

        var resp = await Http.DeleteAsync($"api/user/{id}");
        if (resp.IsSuccessStatusCode)
            users!.Remove(users.First(u => u.Id == id));
    }
}
